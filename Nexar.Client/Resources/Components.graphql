mutation ReleaseComponent($input: DesReleaseComponentInput!) {
  desReleaseComponent(input: $input) {
    errors {
      message
    }
  }
}

query ReleaseDefinitions($workspaceUrl: String!) {
  desLibrary(workspaceUrl: $workspaceUrl) {
    revisionNamingSchemes {
      ...MyRevisionNamingScheme
    }
    symbolScheme: revisionNamingSchemeByContentTypeKind(kind: SYMBOL) {
      ...MyRevisionNamingScheme
    }
    footprintScheme: revisionNamingSchemeByContentTypeKind(kind: PCB_COMPONENT) {
      ...MyRevisionNamingScheme
    }
    componentScheme: revisionNamingSchemeByContentTypeKind(kind: COMPONENT) {
      ...MyRevisionNamingScheme
    }
    lifeCycleDefinitions {
      ...MyLifeCycleDefinition
    }
    symbolLifeCycle: lifeCycleDefinitionByContentTypeKind(kind: SYMBOL) {
      ...MyLifeCycleDefinition
    }
    footprintLifeCycle: lifeCycleDefinitionByContentTypeKind(kind: PCB_COMPONENT) {
      ...MyLifeCycleDefinition
    }
    componentLifeCycle: lifeCycleDefinitionByContentTypeKind(kind: COMPONENT) {
      ...MyLifeCycleDefinition
    }
  }
}

fragment MyLifeCycleDefinition on DesLifeCycleDefinition {
  lifeCycleDefinitionId
  name
}

fragment MyRevisionNamingScheme on DesRevisionNamingScheme {
  revisionNamingSchemeId
  name
}

query RevisionDetailsById($revisionId: ID!) {
  desRevisionDetailsById(id: $revisionId) {
    description
    comment
    childCount
    parentCount
    lifeCycleState {
      name
    }
  }
}

query Components($workspaceUrl: String! $first: Int! $after: String) {
  desLibrary(workspaceUrl: $workspaceUrl) {
    components(first: $first after: $after) {
      pageInfo {
        hasNextPage
        endCursor
      }
      nodes {
        ...MyComponent
      }
    }
  }
}

fragment MyComponent on DesComponent {
  id
  name
  revision {
    id
  }
  folder {
    name
  }
}
