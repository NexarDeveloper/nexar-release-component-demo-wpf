mutation ReleaseComponent($input: DesReleaseComponentInput!) {
  desReleaseComponent(input: $input) {
    errors {
      message
    }
  }
}

query ReleaseDefinitions($workspaceUrl: String!) {
  desRevisionNamingSchemes(workspaceUrl: $workspaceUrl) {
    ...MyRevisionNamingScheme
  }
  desSettings(
    workspaceUrl: $workspaceUrl
    names: [
      "Components.Symbol.ReleaseTargetPath"
      "Components.Footprint.ReleaseTargetPath"
    ]
  )
  symbolScheme: desRevisionNamingSchemeByContentTypeKind(workspaceUrl: $workspaceUrl, kind: SYMBOL) {
    ...MyRevisionNamingScheme
  }
  footprintScheme: desRevisionNamingSchemeByContentTypeKind(workspaceUrl: $workspaceUrl, kind: PCB_COMPONENT) {
    ...MyRevisionNamingScheme
  }
  componentScheme: desRevisionNamingSchemeByContentTypeKind(workspaceUrl: $workspaceUrl, kind: COMPONENT) {
    ...MyRevisionNamingScheme
  }
  desLifeCycleDefinitions(workspaceUrl: $workspaceUrl) {
    ...MyLifeCycleDefinition
  }
  symbolLifeCycle: desLifeCycleDefinitionByContentTypeKind(workspaceUrl: $workspaceUrl, kind: SYMBOL) {
    ...MyLifeCycleDefinition
  }
  footprintLifeCycle: desLifeCycleDefinitionByContentTypeKind(workspaceUrl: $workspaceUrl, kind: PCB_COMPONENT) {
    ...MyLifeCycleDefinition
  }
  componentLifeCycle: desLifeCycleDefinitionByContentTypeKind(workspaceUrl: $workspaceUrl, kind: COMPONENT) {
    ...MyLifeCycleDefinition
  }
}

fragment MyLifeCycleDefinition on DesLifeCycleDefinition {
  lifeCycleDefinitionId
  name
}

fragment MyRevisionNamingScheme on DesRevisionNamingScheme {
  revisionNamingSchemeId
  name
}

query RevisionDetailsById($revisionId: ID!) {
  desRevisionDetailsById(id: $revisionId) {
    description
    comment
    childCount
    parentCount
    lifeCycleState {
      name
    }
  }
}

query Components($workspaceUrl: String! $first: Int! $after: String) {
  desLibrary(workspaceUrl: $workspaceUrl) {
    components(first: $first after: $after) {
      pageInfo {
        hasNextPage
        endCursor
      }
      nodes {
        ...MyComponent
      }
    }
  }
}

fragment MyComponent on DesComponent {
  id
  name
  revision {
    id
  }
  folder {
    id
  }
}
